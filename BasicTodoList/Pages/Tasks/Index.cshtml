@page
@model IndexModel

@{
    ViewData["Title"] = "Index";
}

<div class="flex items-baseline justify-between gap-2 mr-10 py-3 border-b">
    <h3 class="text-4xl">@Model.TodoList.Name</h3>
</div>


<div class="flex gap-1 items-center text-sm justify-end mr-10 mt-2">
    <input class="h-3 w-3 rounded-full text-green-500 cursor-pointer" type="checkbox" id="hide-completed-checkbox" />
    <label for="hideCompleted">Hide completed tasks</label>
</div>
<partial name="_AddTaskPartial" model="@Model.TodoTask" />
<partial name="_ListOfTasksPartial" model="@Model.TodoTasks" />
@if (Model.UserIsListCreator)
{
    <div class="flex mt-3 pt-3 space-x-5">
        <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-plus" viewBox="0 0 16 16">
                <path d="M6 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H1s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C9.516 10.68 8.289 10 6 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z" />
                <path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5z"></path>
            </svg>
            <a asp-page="/Lists/Invite" asp-route-id="@Model.TodoList.Id">Invite Collaborator</a>
        </div>
        <div class="flex items-center gap-2">
            <img src="/img/icons/delete-list.svg" alt="" />
            <a asp-page="/Lists/Delete" asp-route-id="@Model.TodoList.Id">Delete list</a>
        </div>
    </div>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
         let startPicker = flatpickr("#dueAt", {
            locale: "en",
            enableTime: false,
            altInput: true,
            altFormat: "l F j",
             dateFormat: "Y-m-d",
            minDate: "@DateTime.Today",
         })

        const toggleAddTask = () => {
            $('#add-task-input').focus(function () {
                $("#add-task-extra").show("fast");
                $("#task-description-validation").removeClass("hidden");
            })

            $('#cancel-button').click(function () {
                $("#add-task-extra").hide("fast");
                $("#task-description-validation").addClass("hidden");
            })
        }


        const completedTasks = Array.from(document.querySelectorAll(".task")).filter(task => task.querySelector("input[type='checkbox']").checked)
        const checkbox = document.querySelector("#hide-completed-checkbox");

        const checkboxEventListener = () => {
            checkbox.addEventListener("click", function () {
                localStorage.setItem("hideCompletedTasks", checkbox.checked ? "true" : "false");
                toggleTaskVisibility();
            })
        }
        function toggleTaskVisibility() {
            if (localStorage.getItem("hideCompletedTasks") === "true") {
                checkbox.checked = true;
                completedTasks.forEach((task) => {
                    task.classList.add("hidden");
                })
            }
            else {
                checkbox.checked = false;
                completedTasks.forEach((task) => {
                    task.classList.remove("hidden");
                })
            }
        }

        toggleTaskVisibility();
        checkboxEventListener();
        toggleAddTask();
    </script>
}
